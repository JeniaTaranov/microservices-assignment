version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: microservices_db
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d microservices_db" ]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
    healthcheck:
      test: [ "CMD", "bash", "-c", "nc -z kafka 9092" ]
      interval: 5s
      timeout: 5s
      retries: 10

  kafka-init:
    image: apache/kafka:latest
    depends_on:
        kafka:
          condition: service_healthy
    command: >
        bash -c "
          echo 'Creating Kafka topics...' &&
          /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic user-created --partitions 1 --replication-factor 1 &&
          /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic order-created --partitions 1 --replication-factor 1 &&
          echo 'Successfully created Kafka topics'
        "

  user-service:
    build:
      context: user-service
    container_name: user-service
    restart: always
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/microservices_db
      KAFKA_BROKER: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    ports:
      - '3001:3001'
    command: npm run dev

  order-service:
    build:
      context: order-service
    container_name: order-service
    restart: always
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/microservices_db
      KAFKA_BROKER: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    ports:
      - '3002:3002'
    command: npm run dev

  auth-service:
    build: auth-service
    container_name: auth-service
    restart: always
    ports:
      - '3003:3003'
    environment:
      JWT_SECRET: your_secret_key
      ADMIN_USERNAME: admin
      ADMIN_PASSWORD: password
    depends_on:
      postgres:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    command: npm run dev

  api-gateway:
    build: api-gateway
    container_name: api-gatway
    restart: always
    ports:
      - '3000:3000'
    environment:
      USER_SERVICE_URL: http://user-service:3001
      ORDER_SERVICE_URL: http://order-service:3002
      AUTH_SERVICE_URL: http://auth-service:3003
      JWT_SECRET: your_secret_key
    depends_on:
      - user-service
      - order-service
      - auth-service
    command: npm run dev

volumes:
  postgres-data: